# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  isAdmin: Boolean
  password: PasswordState
  role: Role
  department: Department
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
  role: RoleWhereInput
  department: DepartmentWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  isAdmin: Boolean
  password: String
  role: RoleRelateToOneForUpdateInput
  department: DepartmentRelateToOneForUpdateInput
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input DepartmentRelateToOneForUpdateInput {
  create: DepartmentCreateInput
  connect: DepartmentWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  isAdmin: Boolean
  password: String
  role: RoleRelateToOneForCreateInput
  department: DepartmentRelateToOneForCreateInput
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

input DepartmentRelateToOneForCreateInput {
  create: DepartmentCreateInput
  connect: DepartmentWhereUniqueInput
}

type Group {
  id: ID!
  name: String
}

input GroupWhereUniqueInput {
  id: ID
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  id: IDFilter
  name: StringFilter
}

input GroupOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input GroupUpdateInput {
  name: String
}

input GroupUpdateArgs {
  where: GroupWhereUniqueInput!
  data: GroupUpdateInput!
}

input GroupCreateInput {
  name: String
}

type Role {
  id: ID!
  name: String
  canManageContent: Boolean
  canManageUsers: Boolean
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  usersCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canManageContent: BooleanFilter
  canManageUsers: BooleanFilter
  users: UserManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canManageContent: OrderDirection
  canManageUsers: OrderDirection
}

input RoleUpdateInput {
  name: String
  canManageContent: Boolean
  canManageUsers: Boolean
  users: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canManageContent: Boolean
  canManageUsers: Boolean
  users: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Ticket {
  id: ID!
  subject: String
  ticketNo: Int
  post: Ticket_post_Document
  priority: Int
  submitedOn: DateTime
  submittedBy: User
  assignedTo: User
}

type Ticket_post_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input TicketWhereUniqueInput {
  id: ID
}

input TicketWhereInput {
  AND: [TicketWhereInput!]
  OR: [TicketWhereInput!]
  NOT: [TicketWhereInput!]
  id: IDFilter
  subject: StringFilter
  ticketNo: IntNullableFilter
  priority: IntNullableFilter
  submitedOn: DateTimeNullableFilter
  submittedBy: UserWhereInput
  assignedTo: UserWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TicketOrderByInput {
  id: OrderDirection
  subject: OrderDirection
  ticketNo: OrderDirection
  priority: OrderDirection
  submitedOn: OrderDirection
}

input TicketUpdateInput {
  subject: String
  ticketNo: Int
  post: JSON
  priority: Int
  submitedOn: DateTime
  submittedBy: UserRelateToOneForUpdateInput
  assignedTo: UserRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TicketUpdateArgs {
  where: TicketWhereUniqueInput!
  data: TicketUpdateInput!
}

input TicketCreateInput {
  subject: String
  ticketNo: Int
  post: JSON
  priority: Int
  submitedOn: DateTime
  submittedBy: UserRelateToOneForCreateInput
  assignedTo: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Department {
  id: ID!
  name: String
  code: String
  users: User
}

input DepartmentWhereUniqueInput {
  id: ID
  code: String
}

input DepartmentWhereInput {
  AND: [DepartmentWhereInput!]
  OR: [DepartmentWhereInput!]
  NOT: [DepartmentWhereInput!]
  id: IDFilter
  name: StringFilter
  code: StringFilter
  users: UserWhereInput
}

input DepartmentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  code: OrderDirection
}

input DepartmentUpdateInput {
  name: String
  code: String
  users: UserRelateToOneForUpdateInput
}

input DepartmentUpdateArgs {
  where: DepartmentWhereUniqueInput!
  data: DepartmentUpdateInput!
}

input DepartmentCreateInput {
  name: String
  code: String
  users: UserRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createGroup(data: GroupCreateInput!): Group
  createGroups(data: [GroupCreateInput!]!): [Group]
  updateGroup(where: GroupWhereUniqueInput!, data: GroupUpdateInput!): Group
  updateGroups(data: [GroupUpdateArgs!]!): [Group]
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteGroups(where: [GroupWhereUniqueInput!]!): [Group]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createTicket(data: TicketCreateInput!): Ticket
  createTickets(data: [TicketCreateInput!]!): [Ticket]
  updateTicket(where: TicketWhereUniqueInput!, data: TicketUpdateInput!): Ticket
  updateTickets(data: [TicketUpdateArgs!]!): [Ticket]
  deleteTicket(where: TicketWhereUniqueInput!): Ticket
  deleteTickets(where: [TicketWhereUniqueInput!]!): [Ticket]
  createDepartment(data: DepartmentCreateInput!): Department
  createDepartments(data: [DepartmentCreateInput!]!): [Department]
  updateDepartment(
    where: DepartmentWhereUniqueInput!
    data: DepartmentUpdateInput!
  ): Department
  updateDepartments(data: [DepartmentUpdateArgs!]!): [Department]
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department
  deleteDepartments(where: [DepartmentWhereUniqueInput!]!): [Department]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  groups(
    where: GroupWhereInput! = {}
    orderBy: [GroupOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Group!]
  group(where: GroupWhereUniqueInput!): Group
  groupsCount(where: GroupWhereInput! = {}): Int
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  tickets(
    where: TicketWhereInput! = {}
    orderBy: [TicketOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Ticket!]
  ticket(where: TicketWhereUniqueInput!): Ticket
  ticketsCount(where: TicketWhereInput! = {}): Int
  departments(
    where: DepartmentWhereInput! = {}
    orderBy: [DepartmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Department!]
  department(where: DepartmentWhereUniqueInput!): Department
  departmentsCount(where: DepartmentWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
